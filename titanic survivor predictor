
Skip to content
Pull requests
Issues
Marketplace
Explore
@alamandaganesh2001
Harish-n1 /
Personal-Projects
Public

Code
Issues
Pull requests
Actions
Projects
Wiki
Security

    Insights

Personal-Projects/Titanic_Survivors_Prediction.ipynb
@Harish-n1
Harish-n1 Created using Colaboratory
Latest commit 942f816 on 18 Sep 2021
History
1 contributor
1514 lines (1514 sloc) 214 KB
{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Titanic Survivors Prediction",
      "provenance": [],
      "mount_file_id": "1cQ_uxgvmqpnHGQefGSLc_px2a25r-kGV",
      "authorship_tag": "ABX9TyPhNF0x0Td14X1fjh3s/ekG",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Harish-n1/Personal-Projects/blob/main/Titanic_Survivors_Prediction.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jEjiGOtp9aeX"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import warnings\n",
        "warnings.simplefilter('ignore')"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3WENnD9y-oBW"
      },
      "source": [
        "train, test = pd.read_csv('/content/drive/MyDrive/train (1).csv'), pd.read_csv('/content/drive/MyDrive/test.csv')"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "YP1rNp3M_rQZ",
        "outputId": "64333e8b-ed3e-4ea9-e0a5-abdace8a059d"
      },
      "source": [
        "train.head()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n",
              "0            1         0       3  ...   7.2500   NaN         S\n",
              "1            2         1       1  ...  71.2833   C85         C\n",
              "2            3         1       3  ...   7.9250   NaN         S\n",
              "3            4         1       1  ...  53.1000  C123         S\n",
              "4            5         0       3  ...   8.0500   NaN         S\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Ql2dLuye_vEE",
        "outputId": "4b92c5e6-efb9-427f-c5aa-744061f25da1"
      },
      "source": [
        "test.head()"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>892</td>\n",
              "      <td>3</td>\n",
              "      <td>Kelly, Mr. James</td>\n",
              "      <td>male</td>\n",
              "      <td>34.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>330911</td>\n",
              "      <td>7.8292</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>893</td>\n",
              "      <td>3</td>\n",
              "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
              "      <td>female</td>\n",
              "      <td>47.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>363272</td>\n",
              "      <td>7.0000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>894</td>\n",
              "      <td>2</td>\n",
              "      <td>Myles, Mr. Thomas Francis</td>\n",
              "      <td>male</td>\n",
              "      <td>62.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>240276</td>\n",
              "      <td>9.6875</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>895</td>\n",
              "      <td>3</td>\n",
              "      <td>Wirz, Mr. Albert</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>315154</td>\n",
              "      <td>8.6625</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>896</td>\n",
              "      <td>3</td>\n",
              "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
              "      <td>female</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3101298</td>\n",
              "      <td>12.2875</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Pclass  ... Cabin Embarked\n",
              "0          892       3  ...   NaN        Q\n",
              "1          893       3  ...   NaN        S\n",
              "2          894       2  ...   NaN        Q\n",
              "3          895       3  ...   NaN        S\n",
              "4          896       3  ...   NaN        S\n",
              "\n",
              "[5 rows x 11 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MXL2P5U4_w08"
      },
      "source": [
        "data = pd.read_csv('/content/drive/MyDrive/data.csv')"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "slu7YsnDAdbF",
        "outputId": "60ea13d6-efac-4de3-e76f-0af8fec58968"
      },
      "source": [
        "data.head()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>892</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>893</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>894</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>895</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>896</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Survived\n",
              "0          892         0\n",
              "1          893         1\n",
              "2          894         0\n",
              "3          895         0\n",
              "4          896         1"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zJDq_R3eAiVM",
        "outputId": "25eecf9b-8009-43e9-a8a7-d2522c68f664"
      },
      "source": [
        "train.info()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 891 entries, 0 to 890\n",
            "Data columns (total 12 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  891 non-null    int64  \n",
            " 1   Survived     891 non-null    int64  \n",
            " 2   Pclass       891 non-null    int64  \n",
            " 3   Name         891 non-null    object \n",
            " 4   Sex          891 non-null    object \n",
            " 5   Age          714 non-null    float64\n",
            " 6   SibSp        891 non-null    int64  \n",
            " 7   Parch        891 non-null    int64  \n",
            " 8   Ticket       891 non-null    object \n",
            " 9   Fare         891 non-null    float64\n",
            " 10  Cabin        204 non-null    object \n",
            " 11  Embarked     889 non-null    object \n",
            "dtypes: float64(2), int64(5), object(5)\n",
            "memory usage: 83.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fu0Ce_fSCV8T",
        "outputId": "3fde73ff-a58d-4c1e-9da9-8e8abbbe31e4"
      },
      "source": [
        "test.info()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 418 entries, 0 to 417\n",
            "Data columns (total 11 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  418 non-null    int64  \n",
            " 1   Pclass       418 non-null    int64  \n",
            " 2   Name         418 non-null    object \n",
            " 3   Sex          418 non-null    object \n",
            " 4   Age          332 non-null    float64\n",
            " 5   SibSp        418 non-null    int64  \n",
            " 6   Parch        418 non-null    int64  \n",
            " 7   Ticket       418 non-null    object \n",
            " 8   Fare         417 non-null    float64\n",
            " 9   Cabin        91 non-null     object \n",
            " 10  Embarked     418 non-null    object \n",
            "dtypes: float64(2), int64(4), object(5)\n",
            "memory usage: 36.0+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UoshWwADCdnM",
        "outputId": "2d5eacf3-d8fa-4ed4-bc98-bcc5c037d6a1"
      },
      "source": [
        "data.info()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 418 entries, 0 to 417\n",
            "Data columns (total 2 columns):\n",
            " #   Column       Non-Null Count  Dtype\n",
            "---  ------       --------------  -----\n",
            " 0   PassengerId  418 non-null    int64\n",
            " 1   Survived     418 non-null    int64\n",
            "dtypes: int64(2)\n",
            "memory usage: 6.7 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Bw8rVhF-ChXM"
      },
      "source": [
        "test['survived'] = data['Survived']"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "_YRaJU_gC968",
        "outputId": "ed40c212-3df1-465e-a5fa-c51e66774c0c"
      },
      "source": [
        "test.head()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>892</td>\n",
              "      <td>3</td>\n",
              "      <td>Kelly, Mr. James</td>\n",
              "      <td>male</td>\n",
              "      <td>34.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>330911</td>\n",
              "      <td>7.8292</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>893</td>\n",
              "      <td>3</td>\n",
              "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
              "      <td>female</td>\n",
              "      <td>47.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>363272</td>\n",
              "      <td>7.0000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>894</td>\n",
              "      <td>2</td>\n",
              "      <td>Myles, Mr. Thomas Francis</td>\n",
              "      <td>male</td>\n",
              "      <td>62.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>240276</td>\n",
              "      <td>9.6875</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>895</td>\n",
              "      <td>3</td>\n",
              "      <td>Wirz, Mr. Albert</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>315154</td>\n",
              "      <td>8.6625</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>896</td>\n",
              "      <td>3</td>\n",
              "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
              "      <td>female</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3101298</td>\n",
              "      <td>12.2875</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Pclass  ... Embarked survived\n",
              "0          892       3  ...        Q        0\n",
              "1          893       3  ...        S        1\n",
              "2          894       2  ...        Q        0\n",
              "3          895       3  ...        S        0\n",
              "4          896       3  ...        S        1\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "djEOfcWdDWLA"
      },
      "source": [
        "Finding Missing or Null values"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YPFt6wbtDX4c",
        "outputId": "eee598ce-52d8-4899-9898-0fc38f87fb8b"
      },
      "source": [
        "train.isnull().sum()"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId      0\n",
              "Survived         0\n",
              "Pclass           0\n",
              "Name             0\n",
              "Sex              0\n",
              "Age            177\n",
              "SibSp            0\n",
              "Parch            0\n",
              "Ticket           0\n",
              "Fare             0\n",
              "Cabin          687\n",
              "Embarked         2\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xXWc0AgeDhad",
        "outputId": "0cb88b0b-67c4-49a2-81c1-c7afc80043b8"
      },
      "source": [
        "test.isnull().sum()"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId      0\n",
              "Pclass           0\n",
              "Name             0\n",
              "Sex              0\n",
              "Age             86\n",
              "SibSp            0\n",
              "Parch            0\n",
              "Ticket           0\n",
              "Fare             1\n",
              "Cabin          327\n",
              "Embarked         0\n",
              "survived         0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QBbhHJRTDmrr"
      },
      "source": [
        "train = train.drop(labels= 'Cabin',axis = 1)\n",
        "test = test.drop(labels = 'Cabin', axis = 1)"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lAbkTzRNEn_E"
      },
      "source": [
        "train_age_median = train['Age'].median()\n",
        "test_age_median = test['Age'].median()\n",
        "\n",
        "train['Age'].fillna(train_age_median, inplace = True)\n",
        "test['Age'].fillna(test_age_median, inplace = True)"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gbX3on_WFyN8"
      },
      "source": [
        "train.dropna(inplace = True)\n",
        "test.dropna(inplace = True)"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Brx2MaSUGKsj",
        "outputId": "c3ba1091-f25f-4d97-af85-77953fb60327"
      },
      "source": [
        "train.isna().sum()"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId    0\n",
              "Survived       0\n",
              "Pclass         0\n",
              "Name           0\n",
              "Sex            0\n",
              "Age            0\n",
              "SibSp          0\n",
              "Parch          0\n",
              "Ticket         0\n",
              "Fare           0\n",
              "Embarked       0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3jOS-rjrGPQD",
        "outputId": "315fb6e3-8f07-44f7-87e2-665e7f8da738"
      },
      "source": [
        "test.isna().sum()"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId    0\n",
              "Pclass         0\n",
              "Name           0\n",
              "Sex            0\n",
              "Age            0\n",
              "SibSp          0\n",
              "Parch          0\n",
              "Ticket         0\n",
              "Fare           0\n",
              "Embarked       0\n",
              "survived       0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SwMNRw_yGtvv"
      },
      "source": [
        "Encoding the Label categories"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MkQpo5_JGS6j"
      },
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "obj = ['Sex', 'Embarked', 'Ticket','Name']\n",
        "for i in obj:\n",
        "  train[i] = le.fit_transform(train[i])\n",
        "  test[i] = le.fit_transform(test[i])"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Yc9jTAqfHYc_",
        "outputId": "d965a059-190a-496e-a1c2-f2038ebcbaeb"
      },
      "source": [
        "train.head()"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>108</td>\n",
              "      <td>1</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>522</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>190</td>\n",
              "      <td>0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>595</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>353</td>\n",
              "      <td>0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>668</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>272</td>\n",
              "      <td>0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>48</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>15</td>\n",
              "      <td>1</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>471</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Survived  Pclass  Name  ...  Parch  Ticket     Fare  Embarked\n",
              "0            1         0       3   108  ...      0     522   7.2500         2\n",
              "1            2         1       1   190  ...      0     595  71.2833         0\n",
              "2            3         1       3   353  ...      0     668   7.9250         2\n",
              "3            4         1       1   272  ...      0      48  53.1000         2\n",
              "4            5         0       3    15  ...      0     471   8.0500         2\n",
              "\n",
              "[5 rows x 11 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Nta1XVs_OjGI",
        "outputId": "804fcdff-7f5b-44d7-93c6-063e62d8d9a8"
      },
      "source": [
        "test.head()"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>892</td>\n",
              "      <td>3</td>\n",
              "      <td>206</td>\n",
              "      <td>1</td>\n",
              "      <td>34.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>152</td>\n",
              "      <td>7.8292</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>893</td>\n",
              "      <td>3</td>\n",
              "      <td>402</td>\n",
              "      <td>0</td>\n",
              "      <td>47.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>221</td>\n",
              "      <td>7.0000</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>894</td>\n",
              "      <td>2</td>\n",
              "      <td>269</td>\n",
              "      <td>1</td>\n",
              "      <td>62.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>73</td>\n",
              "      <td>9.6875</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>895</td>\n",
              "      <td>3</td>\n",
              "      <td>407</td>\n",
              "      <td>1</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>147</td>\n",
              "      <td>8.6625</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>896</td>\n",
              "      <td>3</td>\n",
              "      <td>178</td>\n",
              "      <td>0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>138</td>\n",
              "      <td>12.2875</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Pclass  Name  Sex  ...  Ticket     Fare  Embarked  survived\n",
              "0          892       3   206    1  ...     152   7.8292         1         0\n",
              "1          893       3   402    0  ...     221   7.0000         2         1\n",
              "2          894       2   269    1  ...      73   9.6875         1         0\n",
              "3          895       3   407    1  ...     147   8.6625         2         0\n",
              "4          896       3   178    0  ...     138  12.2875         2         1\n",
              "\n",
              "[5 rows x 11 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 663
        },
        "id": "Hj59yDNeOlZ4",
        "outputId": "9567673d-60bd-4ed9-ab23-6e2697b0a3fe"
      },
      "source": [
        "fig, (ax1,ax2) = plt.subplots(2,1 , figsize = (9,10))\n",
        "sns.heatmap(train.corr().abs(), annot = True , ax=ax1)\n",
        "sns.heatmap(test.corr().abs(), annot =True, ax=ax2)"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7faee46c8d50>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 648x720 with 4 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wYQwEEp8QqSN"
      },
      "source": [
        "Removing less correlated columns"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KGBgtfDEO9iY"
      },
      "source": [
        "train = train.drop(labels =[ 'Name','PassengerId','SibSp'],axis=1)\n",
        "test = test.drop(['Name','PassengerId','SibSp'],axis=1)"
      ],
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "VC5YlfBXRFoj",
        "outputId": "dee07e47-61aa-401e-e6f9-865729d6995b"
      },
      "source": [
        "plt.figure(figsize=(5,5))\n",
        "sns.countplot(x='Sex',hue='Survived',data=train)\n",
        "plt.legend(['dead','survived'])\n",
        "plt.xlabel('0 = women | 1 = men')"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, '0 = women | 1 = men')"
            ]
          },
          "metadata": {},
          "execution_count": 43
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAU0AAAE9CAYAAACP0jAFAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAVjElEQVR4nO3df5BV5Z3n8fc3QELwt0i5CirUBDdREZT214gpVzMRo9smWbDjJsQkZknF6OC64ybrsv7IrFWO0XGN445lSQacGAF/RNEYp4w/ApOMZkBRFOOGxExsQpSgEjXBSPjuH33ABgHv0/bpe7t5v6pu9TnPec7p7710fXjOvfc8JzITSVJj3tPsAiSpPzE0JamAoSlJBQxNSSpgaEpSgX4dmhFxX7NrkDTwbC9bBvdlIb1t1113Pamtrc3vTEnqbb/b1oZ+HZpjx45l8eLFzS5D0gATET/b1rZ+fXouSX3N0JSkAoamJBXo1+9pbs2bb75JZ2cn69ata3Yp/crQoUMZNWoUQ4YMaXYpUksbcKHZ2dnJLrvswujRo4mIZpfTL2Qma9asobOzkzFjxjS7HKmlDbjT83Xr1jF8+HADs0BEMHz4cEfnUgMGXGgCBmYP+JpJjRmQodlqLrnkEq688sp3fZzRo0fz29/+thcqktRTA+49zS1NvOCmXj3ekm98tlePJ6l/caRZk8suu4wDDzyQSZMm8eyzzwLw85//nMmTJzNx4kSOO+44fvrTnwJw9913c9RRR3HYYYfxkY98hBdeeAGANWvW8NGPfpSDDz6YL37xizjLvtR8A36k2QxLlixh7ty5LF26lPXr13P44YczceJEpk+fzvXXX8/YsWN59NFHOfvss3nwwQeZNGkSjzzyCBHBjTfeyBVXXMFVV13FpZdeyqRJk7jooov43ve+x6xZs5r91HZIvX220ko8cypnaNZg0aJFfOITn2DYsGEAtLe3s27dOn784x8zderUTf3eeOMNoOtrUh0dHaxatYo//vGPm772s3DhQu644w4ATjnlFPbYY48+fiaStmRo9pENGzaw++67s3Tp0rdtO/fcczn//PNpb2/n4Ycf5pJLLun7AiU1xPc0a/DhD3+YO++8kz/84Q+8+uqr3H333QwbNowxY8Zw6623Al1fKH/iiScAWLt2LSNHjgRgzpw5mx3nO9/5DgDf//73efnll/v4mUjakqFZg8MPP5yOjg7Gjx/PySefzBFHHAHAzTffzKxZsxg/fjwHH3wwd911F9D1laSpU6cyceJE9tprr03Hufjii1m4cCEHH3wwd9xxB/vvv39Tno+kt0R//kS2ra0tt5xP85lnnuFDH/pQkyrq33ztts4PgnY8EbEkM9u2ts2RpiQVMDQlqYChKUkFDE1JKmBoSlIBQ1OSChia/cSCBQu4/PLLe+VYO++8c68cR9oRDfjLKH/19XG9erz9L1rWq8frbv369QwevPV/kvb2dtrb22v73ZIa40izBq+//jqnnHIK48eP55BDDmHevHmbTSC8ePFijj/+eKDraqBp06Zx7LHHMm3aNI4++miefvrpTcc6/vjjWbx4MbNnz+acc85h7dq1HHDAAWzYsGHT79pvv/148803tzn13HPPPccxxxzDuHHjmDlzZt++GNIAY2jW4L777mPffffliSee4KmnnmLy5Mnb7b98+XJ+8IMfcMstt9DR0cH8+fMBWLVqFatWraKt7a0LE3bbbTcmTJjAD3/4QwDuueceTjrpJIYMGcL06dO59tprWbJkCVdeeSVnn302ADNmzODLX/4yy5YtY5999qnpWUs7BkOzBuPGjeP+++/nq1/9KosWLWK33Xbbbv/29nbe//73A3D66adz2223ATB//nymTJnytv4dHR3MmzcPgLlz59LR0cFrr722aeq5CRMm8KUvfYlVq1YB8KMf/YgzzjgDgGnTpvXa85R2RAP+Pc1mOPDAA3nssce49957mTlzJieeeCKDBw/edEq95V0fd9ppp03LI0eOZPjw4Tz55JPMmzeP66+//m3Hb29v58ILL+Sll15iyZIlnHDCCbz++uvbnHoOvHGa1Fscadbg17/+NcOGDeMzn/kMF1xwAY899hijR49myZIlANx+++3b3b+jo4MrrriCtWvXcuihh75t+84778wRRxzBjBkzOPXUUxk0aBC77rrrNqeeO/bYY5k7dy7QNdOSpJ4zNGuwbNkyjjzySCZMmMCll17KzJkzufjii5kxYwZtbW0MGjRou/tPmTKFuXPncvrpp2+zT0dHB9/+9rfp6OjY1LatqeeuueYarrvuOsaNG8fKlSt750lKOyinhtMmvnZb59RwOx6nhpOkXmJoSlIBQ1OSCgzI0OzP79M2i6+Z1JgB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\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KREJ5cpMWhUO"
      },
      "source": [
        "x_train = train.drop(labels = 'Survived',axis = 1)\n",
        "y_train = train['Survived']\n",
        "x_test = test.drop(labels = 'survived',axis = 1)\n",
        "y_test = test['survived']"
      ],
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0batEIaceq3Q"
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.metrics import accuracy_score"
      ],
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vAYuibg9YzHK"
      },
      "source": [
        "model1 = RandomForestClassifier()\n",
        "model2 = RandomForestRegressor()\n",
        "model3 = DecisionTreeClassifier()\n",
        "model4 = DecisionTreeRegressor()"
      ],
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "vjdaWvRfZFQw",
        "outputId": "ccd68df0-e569-4947-ef52-96beee4736ec"
      },
      "source": [
        "model1.fit(x_train,y_train)\n",
        "score1 = model1.score(x_train,y_train)\n",
        "y1_pred = model1.predict(x_test)\n",
        "\n",
        "model2.fit(x_train,y_train)\n",
        "score2 = model2.score(x_train,y_train)\n",
        "y2_pred = model2.predict(x_test)\n",
        "\n",
        "\n",
        "model3.fit(x_train,y_train)\n",
        "score3 = model3.score(x_train,y_train)\n",
        "y3_pred = model3.predict(x_test)\n",
        "\n",
        "\n",
        "model4.fit(x_train,y_train)\n",
        "score4 = model4.score(x_train,y_train)\n",
        "y4_pred = model4.predict(x_test)\n",
        "\n",
        "\n",
        "result = {'Models':['RandomForestClassifier','RandomForestRegressor','DecisionTreeClassifier','DecisionTreeRegressor'],\n",
        "'score':[score1,score2,score3,score4]}\n",
        "\n",
        "score = pd.DataFrame(result,index = [i for i in range(1,5)])\n",
        "score\n"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Models</th>\n",
              "      <th>score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>RandomForestClassifier</td>\n",
              "      <td>0.997750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>RandomForestRegressor</td>\n",
              "      <td>0.920074</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>DecisionTreeClassifier</td>\n",
              "      <td>0.997750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>DecisionTreeRegressor</td>\n",
              "      <td>0.995237</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                   Models     score\n",
              "1  RandomForestClassifier  0.997750\n",
              "2   RandomForestRegressor  0.920074\n",
              "3  DecisionTreeClassifier  0.997750\n",
              "4   DecisionTreeRegressor  0.995237"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uRwvIYjltBgm"
      },
      "source": [
        "We can take either RandomForestClassifier or DecisionTreeClassifier with highest scores."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pt7rk3ncc5Ba",
        "outputId": "a575f893-d9a0-454f-ae5f-3dab555c6353"
      },
      "source": [
        "model1.fit(x_train,y_train)\n",
        "pred = model1.predict(x_test)\n",
        "accu = accuracy_score(pred,y_test)\n",
        "accu"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8752997601918465"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Sr4n9TMOs7bh"
      },
      "source": [
        "87% Accuracy"
      ]
    }
  ]
}
Footer
© 2022 GitHub, Inc.
Footer navigation

    Terms
    Privacy
    Security
    Status
    Docs
    Contact GitHub
    Pricing
    API
    Training
    Blog
    About

